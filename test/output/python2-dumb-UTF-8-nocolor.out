python2 test/test.py


Traceback (most recent call last):
  File "test/test.py", line 16, in <module>
    shallow(bar, 15)
    │       └ 2
    └ <function shallow at 0xDEADBEEF>
  File "test/test.py", line 7, in shallow
    deep(a + b)
    │    │   └ 15
    │    └ 2
    └ <function deep at 0xDEADBEEF>
  File "test/test.py", line 12, in deep
    assert val > 10 and foo == 60
           │            └ 52
           └ 17
AssertionError: assert val > 10 and foo == 60



python2 test/test_color.py


False



./test/test_interactive.sh


spawn python2 -m better_exceptions -q

>>> import better_exceptions
>>> def foo(a):
...     assert a > 10
... 
>>> foo(1)
Traceback (most recent call last):
  File "/removed/for/test/purposes.ext", line 103, in runcode
    exec code in self.locals
         │       └ <better_exceptions.repl.BetterExceptionsConsole object at 0xDEADBEEF>
         └ <code object <module> at 0xDEADBEEF, file "@@@REPL@@@4", line 1>
  File "<console>", line 1, in <module>
    foo(1)
    └ <function foo at 0xDEADBEEF>
  File "<console>", line 2, in foo
    assert a > 10
           └ 1
AssertionError: assert a > 10
>>> exit()



./test/test_interactive_raw.sh


spawn python2 -m test_util.quiet_console

>>> import better_exceptions
WARNING: better_exceptions will not inspect code from the command line
         using: `python -m better_exceptions'. Otherwise, only code
         loaded from files will be inspected!
>>> def foo(a):
...     assert a > 10
... 
>>> foo(1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "<console>", line 2, in foo
AssertionError
>>> exit()



./test/test_string.sh


Traceback (most recent call last):
  File "<string>", line 1, in <module>
    import better_exceptions; a = 5; assert a > 10 # this should work fine
                              │             └ 5
                              └ 5
AssertionError: import better_exceptions; a = 5; assert a > 10 # this should work fine



